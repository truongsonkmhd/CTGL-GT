package java8_up_to.stream;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamExample {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product(1, "Laptop", 1200),
                new Product(2, "Phone", 800),
                new Product(3, "Tablet", 500),
                new Product(4, "Monitor", 300),
                new Product(5, "Keyboard", 100),
                new Product(6, "Mouse", 50),
                new Product(7, "Headphone", 200)
        );

        // 1. L·ªçc s·∫£n ph·∫©m c√≥ gi√° tr√™n 500
        List<Product> expensiveProducts = products.stream()
                .filter(p -> p.getPrice() > 500).toList();
        System.out.println("üîπ S·∫£n ph·∫©m c√≥ gi√° tr√™n 500:");
        expensiveProducts.forEach(System.out::println);

        // 2. L·∫•y danh s√°ch t√™n s·∫£n ph·∫©m
        List<String> productNames = products.stream()
                .map(Product::getName).toList();
        System.out.println("\nüîπ Danh s√°ch t√™n s·∫£n ph·∫©m:");
        productNames.forEach(System.out::println);

        // 3. S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° gi·∫£m d·∫ßn
        List<Product> sortedProducts = products.stream()
                .sorted(Comparator.comparing(Product::getPrice).reversed()).toList();
        System.out.println("\nüîπ S·∫£n ph·∫©m sau khi s·∫Øp x·∫øp theo gi√° gi·∫£m d·∫ßn:");
        sortedProducts.forEach(System.out::println);

        // 4. B·ªè qua 2 s·∫£n ph·∫©m ƒë·∫ßu ti√™n, l·∫•y 3 s·∫£n ph·∫©m ti·∫øp theo
        List<Product> skippedProducts = products.stream()
                .skip(2)
                .limit(3).toList();
        System.out.println("\nüîπ B·ªè qua 2 s·∫£n ph·∫©m ƒë·∫ßu ti√™n, l·∫•y 3 s·∫£n ph·∫©m ti·∫øp theo:");
        skippedProducts.forEach(System.out::println);

        // 5. Lo·∫°i b·ªè ph·∫ßn t·ª≠ tr√πng l·∫∑p (distinct)
        List<Double> distinctPrices = products.stream()
                .map(Product::getPrice)
                .distinct().toList();
        System.out.println("\nüîπ Danh s√°ch gi√° ti·ªÅn kh√¥ng tr√πng:");
        distinctPrices.forEach(System.out::println);

        // 6. T√¨m s·∫£n ph·∫©m ƒë·∫ßu ti√™n c√≥ gi√° tr√™n 500
        Optional<Product> firstExpensive = products.stream()
                .filter(p -> p.getPrice() > 500)
                .findFirst();
        System.out.println("\nüîπ S·∫£n ph·∫©m ƒë·∫ßu ti√™n c√≥ gi√° tr√™n 500: " + firstExpensive.orElse(null));

        // 7. T√¨m b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o c√≥ gi√° d∆∞·ªõi 300
        Optional<Product> anyCheapProduct = products.stream()
                .filter(p -> p.getPrice() < 300)
                .findAny();
        System.out.println("\nüîπ M·ªôt s·∫£n ph·∫©m gi√° d∆∞·ªõi 300: " + anyCheapProduct.orElse(null));

        // 8. Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        boolean allExpensive = products.stream().allMatch(p -> p.getPrice() > 50);
        boolean anyExpensive = products.stream().anyMatch(p -> p.getPrice() > 1000);
        boolean noneTooCheap = products.stream().noneMatch(p -> p.getPrice() < 50);
        System.out.println("\nüîπ C√≥ ph·∫£i t·∫•t c·∫£ s·∫£n ph·∫©m gi√° > 50? " + allExpensive);
        System.out.println("üîπ C√≥ s·∫£n ph·∫©m n√†o gi√° > 1000? " + anyExpensive);
        System.out.println("üîπ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o gi√° < 50? " + noneTooCheap);

        // 9. T·ªïng gi√° tr·ªã t·∫•t c·∫£ s·∫£n ph·∫©m (reduce)
        double totalPrice = products.stream()
                .map(Product::getPrice)
                .reduce(0.0, Double::sum);
        System.out.println("\nüîπ T·ªïng gi√° tr·ªã s·∫£n ph·∫©m: " + totalPrice);

        /*VD2*/
        int product = Arrays.asList(1, 2, 3, 4, 5)
                .stream()
                .reduce(1, (a, b) -> a * b);
        System.out.println("T√≠ch c√°c s·ªë: " + product); // K·∫øt qu·∫£: 120
        /*VD3*/

        int max =  Arrays.asList(1, 7, 3, 9, 5)
                .stream()
                .reduce(Integer.MIN_VALUE, Integer::max);
        System.out.println("Gi√° tr·ªã l·ªõn nh·∫•t: " + max); // K·∫øt qu·∫£: 9
        /*VD4*/
        String result = Arrays.asList("Java", "8", "Stream", "API")
                .stream()
                .reduce("", (a, b) -> a + " " + b);
        System.out.println("Chu·ªói k·∫øt qu·∫£: " + result.trim()); // K·∫øt qu·∫£: "Java 8 Stream API"


        // 10. G·ªôp danh s√°ch s·∫£n ph·∫©m v·ªõi danh s√°ch kh√°c (concat)
        List<Product> extraProducts = Arrays.asList(new Product(8, "Speaker", 400), new Product(9, "Charger", 50));
        List<Product> combinedList = Stream.concat(products.stream(), extraProducts.stream()).toList();
        System.out.println("\nüîπ Danh s√°ch sau khi g·ªôp:");
        combinedList.forEach(System.out::println);

        // 11. FlatMap: Danh s√°ch danh m·ª•c s·∫£n ph·∫©m
        List<List<Product>> categories = Arrays.asList(
                Arrays.asList(new Product(10, "Smartwatch", 600), new Product(11, "Fitness Tracker", 300)),
                Arrays.asList(new Product(12, "Camera", 1500), new Product(13, "Drone", 2000))
        );

        List<Product> allProducts = categories.stream()
                .flatMap(List::stream).toList();
        System.out.println("\nüîπ Danh s√°ch s·∫£n ph·∫©m sau khi d√πng flatMap:");
        allProducts.forEach(System.out::println);

        // 12. Nh√≥m s·∫£n ph·∫©m theo kho·∫£ng gi√° (groupingBy)
        Map<String, List<Product>> groupedProducts = products.stream()
                .collect(Collectors.groupingBy(p -> {
                    if (p.getPrice() < 300) return "Gi√° r·∫ª";
                    else if (p.getPrice() < 1000) return "T·∫ßm trung";
                    else return "Cao c·∫•p";
                }));

        System.out.println("\nüîπ Nh√≥m s·∫£n ph·∫©m theo kho·∫£ng gi√°:");
        groupedProducts.forEach((category, productList) -> {
            System.out.println("  " + category + ": " + productList);
        });
    }
}